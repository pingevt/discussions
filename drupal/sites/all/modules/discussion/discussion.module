<?php

/**
 * Implements hook_menu().
 */
function discussion_menu() {
  $items['login'] = array(
    'title' => 'blogs',
    'page callback' => 'luw_login_page_view',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['dashboard'] = array(
    'title' => '',
    'page callback' => 'luw_dashboard_page_view',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['group/%group'] = array(
    'title' => '',
    'page callback' => 'luw_group_dashboard_page_view',
    'page arguments' => array(1),
    'access callback' => 'group_entity_access',
    'access arguments' => array( 1, 'access groups'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['group/%group/memberships'] = array(
    'title' => '',
    'page callback' => 'luw_group_membership_page_view',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );


  // Callbackcs for calendars
  $items['api/current-events'] = array(
    'page callback' => 'current_events_callback',
    'page arguments' => array(),
    'delivery callback' => 'drupal_json_output',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['api/group-events/%group'] = array(
    'page callback' => 'group_events_callback',
    'page arguments' => array(2),
    'delivery callback' => 'drupal_json_output',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function luw_login_page_view() {
  $build = array();

  return $build;
}

function luw_dashboard_page_view() {
  global $user;

  drupal_set_title('Dashboard');

  $groups = Group::getCurrentUserGroups();

  // Add main content
  $build = array(
    '#theme' => 'item_list',
    '#items' => array(),
    '#title' => t('Latest Content'),
  );

  // Pull all comments and nodes...



  if (!empty($groups)) {

    // Get nids within groups.
    $nodes = array();

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'group_content');
    $query->propertyCondition('entity_type', 'node');
    $query->propertyCondition('gid', array_keys($groups));

    $results = $query->execute();

    if (isset($results['group_content'])) {
      $group_contents = entity_load('group_content', array_keys($results['group_content']));

      foreach ($group_contents as $group) {
        $nodes[] = $group->eid;
      }
    }


    $nodes = array_unique($nodes);

    // Load content by created date...
    $items = array();
    foreach ($nodes as $nid) {
      $node = node_load($nid);
      $node->__content_type = 'node';
      // add to array
      $items[] = $node;
    }

    if (!empty($nodes)) {
      $c_query = new EntityFieldQuery();
      $c_query->entityCondition('entity_type', 'comment');
      $c_query->propertyCondition('nid', $nodes, 'IN');
      $c_query->propertyOrderBy('created', 'DESC');

      $c_result = $c_query->execute();
      if (isset($c_result['comment'])) {
        $comments = entity_load('comment', array_keys($c_result['comment']));

        foreach ($comments as $comment) {
          $comment->__content_type = 'comment';
          // add to array
          $items[] = $comment;
        }

      }
    }

    usort($items, '_sort_entities_by_created');

    foreach ($items as $item) {

      $entity_type = $item->__content_type;

      if ($entity_type == 'node') {
        $content = node_view($item, 'latest_feed', $item->language);
      }
      else {
        $content = comment_view($item, node_load($item->nid), 'latest_feed', $item->language);
      }

      $content += array(
        '#theme' => 'entity',
        '#entity_type' => $entity_type,
        '#entity' => $item,
        '#view_mode' => 'latest_feed',
        '#language' => $item->language,
        '#page' => NULL,
      );

      $build['#items'][] = render($content);
      //$build['#items'][] = array('data' => $content);
    }
  }
  else {
    // TODO: dosomething here...
    $build['#items'][] = 'You do not belong to any groups.';
  }

  return $build;
}

function _sort_entities_by_created($a, $b) {
  if ($a->created == $b->created) {
    return 0;
  }
  return ($a->created < $b->created) ? 1 : -1;
}

function luw_group_dashboard_page_view($group) {
  drupal_set_title($group->label());

  // Build Breadcrumbs
  $breadcrumb = array();
  $breadcrumb[] = l('Dashboard', '<front>');

  // Set Breadcrumbs
  drupal_set_breadcrumb($breadcrumb);

  $build = array();

  return $build;
}

function luw_group_membership_page_view($group) {
  $build = array();
  drupal_set_title($group->label() . ' Group Memberships');

  // Build Breadcrumbs
  $breadcrumb = array();
  $breadcrumb[] = l('Dashboard', '<front>');
  $breadcrumb[] = l($group->label() . ' Dashboard', 'group/' . $group->gid);

  // Set Breadcrumbs
  drupal_set_breadcrumb($breadcrumb);



  // Add user
  $build['add_user'] = drupal_get_form('group_add_user_by_email_form', $group);

  // List members
  $members = $group->getGroupMembers();

  $build['members_table'] = array(
    '#theme' => 'table',
    '#header' => array('Username', 'Email', 'Group Role', 'Operations'),
    '#rows' => array(),
    '#empty' => 'There are no users in this group',
  );

  foreach ($members as $member) {
    $build['members_table']['#rows'][] = array(
      $member->_user->name,
      $member->_user->mail,
      $group->getUsersRole($member),
      '',
    );
  }

  return $build;
}

/**
 * Implements hook_theme().
 */
function discussion_theme($existing, $type, $theme, $path) {
  return array(
    'discussion_page_wrapper' => array(
      'template' => 'templates/discussion-page-wrapper',
      'render element' => 'element',
    ),
    'dashboard_content' => array(
      'template' => 'templates/dashboard-content',
      'render element' => 'element',
    ),
    'group_content' => array(
      'template' => 'templates/group-content',
      'render element' => 'element',
    ),
    'mini_calendar' => array(
      'template' => 'templates/mini-calendar',
      'render element' => 'element',
    ),

  );
}

function template_preprocess_mini_calendar() {
  drupal_add_js(drupal_get_path('module', 'discussion') . '/js/mini-calendar.js');
}

function _build_user_block() {
  global $user;
  $user = user_load($user->uid);

  $str = theme('user_picture', array('account' => $user, 'style_name' => 'user_img_normal'));

  //$str = '<div class="user-img">' . theme('image_style', array('style_name' => 'user_img_normal', 'path' => $user->picture->uri)) . '</div>';
  $str .= '<h3>' . $user->name . '</h3>';

  return array('#markup' => $str);
}

function current_events_callback() {
  global $user;

  $query_args = drupal_get_query_parameters();

  $date = isset($_GET['date'])? strtotime($_GET['date']) : mktime(0, 0, 0, date('m'), date('d'), date('Y'));

  $start = date('Y-m-', $date) . '01';
  $end = date('Y-m-', $date) . date('t', $date);

  // Initialize return output array
  $output = array();

  // Get groups of the currently logged in user
  $groups = Group::getCurrentUserGroups();

  // Query Events within the group and within the time frame.
  $q = db_select('node', 'n');
  $q->fields('n', array('nid'));
  $q->join('discussion_group_content', 'dgc', 'n.nid = dgc.eid');
  $q->join('field_data_field_dates', 'f', 'n.nid = f.entity_id');
  $q->condition('f.entity_type', 'node');
  $q->condition('n.type', 'event');

  // create an OR
  $o1 = db_or();
  // start date is within the month
  $o1->condition('f.field_dates_value', array($start, $end), 'BETWEEN');
  // end date is within the month
  $o1->condition('f.field_dates_value2', array($start, $end), 'BETWEEN');

  // Create a new AND
  $span = db_and();
  // Start date is before the month and end date is after the end of the month
  $span->condition('f.field_dates_value', $start, '<');
  $span->condition('f.field_dates_value2', $end, '>');

  // add and to or
  $o1->condition($span);

  // add or to full query
  $q->condition($o1);

  // We want distinct nodes
  $q->distinct();

  $result = $q->execute();

  while($record = $result->fetchAssoc()) {
    $node = node_load($record['nid']);

    $output[] = array(
      'start' => $node->field_dates[LANGUAGE_NONE][0]['value'],
      'end' => $node->field_dates[LANGUAGE_NONE][0]['value2'],
      'title' => $node->title,
      'location' => isset($node->field_event_location[LANGUAGE_NONE][0]['value'])? $node->field_event_location[LANGUAGE_NONE][0]['value'] : '',
      'url' => '',
    );
  }

  return $output;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function discussion_preprocess_page(&$variables) {
  global $user;

  $sidebar = NULL;

  // add user block, always
  $sidebar['user'] = _build_user_block();

  $dashboard = ($_GET['q'] == 'dashboard')? TRUE : FALSE;
  $q = $_GET['q'];
  $q = explode('/', $q);

  if ($dashboard) {
    $groups = Group::getCurrentUserGroups();
    // Set up groups block.
    $sidebar['groups'] = array(
      '#theme' => 'item_list',
      '#items' => array(),
      '#title' => t('Groups'),
    );

    $groups = Group::getCurrentUserGroups();
    foreach ($groups as $gid => $group) {
      $str = $group->label();

      if ($group->isOwner($user)) {
        $str .= ' (Owner)';
      }

      $sidebar['groups']['#items'][] = array(
        'data' => l($str, 'group/' . $group->gid),
      );
    }

    // Setup mini calendar
    $sidebar['mini_calendar'] = array(
      '#theme' => 'mini_calendar',
      '#attributes' => array(
        'data-href' => '/api/current-events',
      ),
    );

  }
  elseif($q[0] == 'group') {
    $group = menu_get_object('group', 1);

    // Setup mini calendar
    $sidebar['mini_calendar'] = array(
      '#theme' => 'mini_calendar',
      '#attributes' => array(
        'data-href' => '/api/group-events/' . $group->gid,
      ),
    );
  }

  if (!is_null($sidebar) && !(isset($q[2]) && $q[2] == 'memberships')) {
    $variables['page']['sidebar'] = $sidebar;
  }

}
