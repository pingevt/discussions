<?php

/**
 * Implements hook_menu().
 */
function discussion_menu() {
  $items['login'] = array(
    'title' => 'blogs',
    'page callback' => 'luw_login_page_view',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['dashboard'] = array(
    'title' => '',
    'page callback' => 'luw_dashboard_page_view',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['group/%luw_group'] = array(
    'title' => '',
    'page callback' => 'luw_group_dashboard_page_view',
    'page arguments' => array(1),
    'access callback' => 'group_entity_access',
    'access arguments' => array( 1, 'access groups'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['group/%luw_group/memberships'] = array(
    'title' => '',
    'page callback' => 'luw_dashboard_group_view',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  return $items;
}

function luw_login_page_view() {
  $build = array();

  return $build;
}

function luw_dashboard_page_view() {
  drupal_set_title('Dashboard');

  $build = array();
  $build['#theme'] = 'dashboard_content';

  // Set up user block.
  $build['user'] = _build_user_block();


  // Set up groups block.
  $build['groups'] = array(
    '#theme' => 'item_list',
    '#items' => array(),
    '#title' => t('Groups'),
  );

  $groups = Group::getCurrentUserGroups();
  foreach ($groups as $gid => $group) {
    $build['groups']['#items'][] = array(
      'data' => l($group->label(), 'group/' . $group->_id),
    );
  }

  // Setup add content block
  /*
  $build['add_content'] = array(
    '#theme' => 'item_list',
    '#items' => array(
      array(
        'data' => l('Add Discussion', 'node/add/discussion'),
      ),
      array(
        'data' => l('Add Event', 'node/add/event'),
      ),
      array(
        'data' => l('Add Gallery', 'node/add/gallery'),
      ),
      array(
        'data' => l('Add Image', 'node/add/image'),
      ),
    ),
    '#title' => t('Add content'),
  );
  */

  // Add main content
  $build['content'] = array(
    '#theme' => 'item_list',
    '#items' => array(),
    '#title' => t('Latest Content'),
  );

  // Pull all comments and nodes...

  // Get nids within groups.
  $nodes = array();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'group_content');
  $query->propertyCondition('entity_type', 'node');
  $query->propertyCondition('gid', array_keys($groups));

  $results = $query->execute();

  if (isset($results['group_content'])) {
    $group_contents = entity_load('group_content', array_keys($results['group_content']));

    foreach ($group_contents as $group) {
      $nodes[] = $group->eid;
    }
  }
  $nodes = array_unique($nodes);

  // Load content by created date...
  $items = array();
  foreach ($nodes as $nid) {
    $node = node_load($nid);
    $node->__content_type = 'node';
    // add to array
    $items[] = $node;
  }

  $c_query = new EntityFieldQuery();
  $c_query->entityCondition('entity_type', 'comment');
  $c_query->propertyCondition('nid', $nodes, 'IN');
  $c_query->propertyOrderBy('created', 'DESC');

  $c_result = $c_query->execute();
  if (isset($c_result['comment'])) {
    $comments = entity_load('comment', array_keys($c_result['comment']));

    foreach ($comments as $comment) {
      $comment->__content_type = 'comment';
      // add to array
      $items[] = $comment;
    }

  }

  usort($items, '_sort_entities_by_created');


  foreach ($items as $item) {

    $entity_type = $item->__content_type;

    if ($entity_type == 'node') {
      $content = node_view($item, 'latest_feed', $item->language);
    }
    else {
      $content = comment_view($item, node_load($item->nid), 'latest_feed', $item->language);
    }

    $content += array(
      '#theme' => 'entity',
      '#entity_type' => $entity_type,
      '#entity' => $item,
      '#view_mode' => 'latest_feed',
      '#language' => $item->language,
      '#page' => NULL,
    );

    $build['content']['#items'][] = render($content);
  }
  return $build;
}

function _sort_entities_by_created($a, $b) {
  if ($a->created == $b->created) {
    return 0;
  }
  return ($a->created < $b->created) ? 1 : -1;
}

function luw_group_dashboard_page_view($group) {
  drupal_set_title($group->label());
  $build = array();
  $build['#theme'] = 'group_content';

  // Set up user block.
  $build['user'] = _build_user_block();

  return $build;
}

/**
 * Implements hook_theme().
 */
function discussion_theme($existing, $type, $theme, $path) {
  return array(
    'dashboard_content' => array(
      'template' => 'templates/dashboard-content',
      'render element' => 'element',
    ),
    'group_content' => array(
      'template' => 'templates/group-content',
      'render element' => 'element',
    ),

  );
}



function _get_users_latest_content($user = NULL) {
  if ($user == NULL) {
    global $user;
  }

}


function _build_user_block() {
  global $user;
  $user = user_load($user->uid);

  $str = '<div class="user-img">' . theme('image_style', array('style_name' => 'user_img_normal', 'path' => $user->picture->uri)) . '</div>';
  $str .= '<h3>' . $user->name . '</h3>';

  return array('#markup' => $str);
}
