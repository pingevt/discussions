<?php

define('DISCUSSION_PATH', drupal_get_path('module', 'discussion'));

include_once 'discussion.features.inc';

/**
 * Implements hook_menu().
 */
function discussion_menu() {
  $items['login'] = array(
    'title' => 'blogs',
    'page callback' => 'luw_login_page_view',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['dashboard'] = array(
    'title' => '',
    'page callback' => 'luw_dashboard_page_view',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['group/%group'] = array(
    'title' => '',
    'page callback' => 'luw_group_dashboard_page_view',
    'page arguments' => array(1),
    'access callback' => 'group_entity_access',
    'access arguments' => array( 1, 'access groups'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['group/%group/memberships'] = array(
    'title' => '',
    'page callback' => 'luw_group_membership_page_view',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  // Content lists
/*
  $items['group/%group/memberships'] = array(
    'title' => '',
    'page callback' => 'luw_group_membership_page_view',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
*/

  // Individual Content Pages
  $items['group/%group/discussion/%node'] = array(
    'title' => '',
    'page callback' => 'group_discussion_page_view',
    'page arguments' => array(1, 3),
    'access callback' => 'group_content_access',
    'access arguments' => array(1, 3, 'view'),
    'type' => MENU_SUGGESTED_ITEM,
  );



  // Callbackcs for calendars
  $items['api/current-events'] = array(
    'page callback' => 'current_events_callback',
    'page arguments' => array(),
    'delivery callback' => 'drupal_json_output',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['api/group-events/%group'] = array(
    'page callback' => 'group_events_callback',
    'page arguments' => array(2),
    'delivery callback' => 'drupal_json_output',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );



  // Super admin pages
  //admin/structure/discussion/group-membership/membership/manage
  $items['admin/groups'] = array(
    'title' => 'Discussion admin',
    'description' => 'Discussion admin',
    'page callback' => 'group_admin',
    'access callback' => TRUE,
    'file path' => 'modules/system',
    'file' => 'system.admin.inc',
  );

  /*$items['admin/groups/group-membership'] = array(
    'title' => 'Group membership',
    'description' => 'Group membership entity admin',
    'page callback' => 'system_admin_menu_block_page',
    'access callback' => TRUE,
    'file path' => 'modules/system',
    'file' => 'system.admin.inc',
    'weight' => 2,
  );*/

  $items['admin/groups/group-membership/manage/%group_membership_bundle'] = array(
    'title' => 'Group membership manage',
    'description' => 'Group membership entity admin',
    'page callback' => 'system_admin_menu_block_page',
    'access callback' => TRUE,
    'file path' => 'modules/system',
    'file' => 'system.admin.inc',
    'weight' => 2,
  );

  /*$items['admin/groups/group-content'] = array(
    'title' => 'Group content',
    'description' => 'Group content entity admin',
    'page callback' => 'system_admin_menu_block_page',
    'access callback' => TRUE,
    'file path' => 'modules/system',
    'file' => 'system.admin.inc',
    'weight' => 3,
  );*/

  $items['admin/groups/group-content/manage/%group_content_bundle'] = array(
    'title' => 'Group content manage',
    'description' => 'Group content entity admin',
    'page callback' => 'system_admin_menu_block_page',
    'access callback' => TRUE,
    'file path' => 'modules/system',
    'file' => 'system.admin.inc',
    'weight' => 2,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function discussion_menu_alter(&$items) {

  unset($items['node']);
  unset($items['node/%node']);
}

function group_admin() {
  $item = menu_get_item();
  $content = system_admin_menu_block($item);
  $build = array(
    'admin_menu_block' => array(
      '#theme' => 'admin_block_content',
      '#content' => $content,
    ),
    'table' => array(),
  );

  $header = array('Name', 'Entity',  array('data' => t('Operations'), 'colspan' => '3'));
  $rows = array();

  foreach (array('group_membership', 'group_content') as $entity_type) {
    $entity_info = entity_get_info($entity_type);

    foreach($entity_info['bundles'] as $bundle_type => $bundle_info) {
      $row = array();
      $row[] = $entity_type;
      $row[] = $bundle_type;

      $row[] = array('data' => l(t('edit'), 'admin/groups/group-membership/manage/' . $bundle_type));
      $row[] = array('data' => l(t('manage fields'), 'admin/groups/group-membership/manage/' . $bundle_type . '/fields'));
      $row[] = array('data' => l(t('manage display'), 'admin/groups/group-membership/manage/' . $bundle_type . '/display'));

      $rows[] = $row;
    }

  }



  $build['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t(''),
  );

  return $build;
}

function group_content_access($group, $node, $op) {
  global $user;

  // first check $node is in $group.
  if (!$group->isNodeInGroup($node)) {
    return FALSE;
  }

  // Check user is in $group.
  if (!$group->isUserMember($user->uid)) {
    return FALSE;
  }

  // Check user has $op privalege in group.
  // Owner - can do anything
  // Editor - can do anything with content, nothing to group
  // Memebr - can view anything but only edit own content
  $membership = $group->getGroupMemebrship($user);
  switch ($op) {
  case 'view':
    return TRUE;
    break;
  case 'edit':

    break;
  case 'delete':

    break;
  }

  //
  return FALSE;
}

function luw_login_page_view() {
  $build = array();

  return $build;
}

function luw_dashboard_page_view() {
  global $user;

  drupal_set_title('Dashboard');

  $groups = Group::getCurrentUserGroups();

  if (count($groups) == 1) {
    drupal_goto('group/' . current($groups)->gid);
  }

  // Add main content
  $build = array(

    '#type' => 'container',
    'items' => array(),
    '#prefix' => '<div id="latest-content-item-list">',
    '#suffix' => '</div>',
  );

  // Pull all comments and nodes...
  if (!empty($groups)) {
    $page = isset($_GET['page'])? $_GET['page'] : 0;
    $page_count = 20;
    $offset = $page * $page_count;

    $count = _pull_latest_content(NULL, NULL, NULL);

    $items = _pull_latest_content(NULL, $offset, $page_count);

    foreach ($items as $item) {

      $entity_type = $item->__nc;

      if ($entity_type == 'node') {
        $content = node_view($item, 'latest_feed', $item->language);
      }
      else {
        $content = comment_view($item, node_load($item->nid), 'latest_feed', $item->language);
      }

      $content += array(
        '#theme' => 'entity',
        '#entity_type' => $entity_type,
        '#entity' => $item,
        '#view_mode' => 'latest_feed',
        '#language' => $item->language,
        '#page' => NULL,
      );

      $build['items'][] = $content;
    }

    $max = ceil($count/$page_count) - 1;
    if ($max < 0) $max = 0;

    $build['pager'] = array(
      '#theme' => 'latest_feed_pager',
      '#page' => $page,
      '#max' => $max,
    );
  }
  else {
    // TODO: dosomething here...
    $build['#items'][] = 'You do not belong to any groups.';
  }

  return $build;
}

function _sort_entities_by_created($a, $b) {
  if ($a->created == $b->created) {
    return 0;
  }
  return ($a->created < $b->created) ? 1 : -1;
}

function luw_group_dashboard_page_view($group) {

  drupal_set_title($group->label());

  // Build Breadcrumbs
  $breadcrumb = array();
  $breadcrumb[] = l('Dashboard', '<front>');

  // Set Breadcrumbs
  drupal_set_breadcrumb($breadcrumb);

  // Add main content
  $build = array(
    '#type' => 'container',
    'items' => array(),
    '#prefix' => '<div id="latest-content-item-list">',
    '#suffix' => '</div>',
  );


  $page = isset($_GET['page'])? $_GET['page'] : 0;
  $page_count = 20;
  $offset = $page * $page_count;

  $count = _pull_latest_content($group, NULL, NULL);

  $items = _pull_latest_content($group, $offset, $page_count);

  foreach ($items as $item) {

    $entity_type = $item->__nc;

    if ($entity_type == 'node') {
      $content = node_view($item, 'latest_feed', $item->language);
    }
    else {
      $content = comment_view($item, node_load($item->nid), 'latest_feed', $item->language);
    }

    $content += array(
      '#theme' => 'entity',
      '#entity_type' => $entity_type,
      '#entity' => $item,
      '#view_mode' => 'latest_feed',
      '#language' => $item->language,
      '#page' => NULL,
    );

    $build['items'][] = $content;
  }

  $max = ceil($count/$page_count) - 1;
  if ($max < 0) $max = 0;

  $build['pager'] = array(
    '#theme' => 'latest_feed_pager',
    '#page' => $page,
    '#max' => $max,
  );

  return $build;
}

function luw_group_membership_page_view($group) {
  $build = array();
  drupal_set_title($group->label() . ' Group Memberships');

  // Build Breadcrumbs
  $breadcrumb = array();
  $breadcrumb[] = l('Dashboard', '<front>');
  $breadcrumb[] = l($group->label() . ' Dashboard', 'group/' . $group->gid);

  // Set Breadcrumbs
  drupal_set_breadcrumb($breadcrumb);



  // Add user
  $build['add_user'] = drupal_get_form('group_add_user_by_email_form', $group);

  // List members
  $members = $group->getGroupMembers();

  $build['members_table'] = array(
    '#theme' => 'table',
    '#header' => array('Username', 'Email', 'Group Role', 'Operations'),
    '#rows' => array(),
    '#empty' => 'There are no users in this group',
  );

  foreach ($members as $member) {
    $build['members_table']['#rows'][] = array(
      $member->_user->name,
      $member->_user->mail,
      $group->getUsersRole($member),
      '',
    );
  }

  return $build;
}

function group_discussion_page_view($group, $node) {
  global $user;
  module_load_include('inc', 'node', 'node.pages');

  $build = array();
  $view_mode = 'full';
  $langcode = NULL;

  // Populate $node->content with a render() array.
  node_build_content($node, $view_mode, $langcode);

  $build['node'] = $node->content;
  // We don't need duplicate rendering info in node->content.
  unset($node->content);

  $build['node'] += array(
    '#theme' => 'node',
    '#node' => $node,
    '#view_mode' => $view_mode,
    '#language' => $langcode,
  );

  // Allow modules to modify the structured node.
  $type = 'node';
  drupal_alter(array('node_view', 'entity_view'), $build['node'], $type);

  // Add in reply form
  $reply_node = new StdClass();
  $reply_node->uid = $user->uid;
  $reply_node->name = isset($user->name) ? $user->name : '';
  $reply_node->type = 'discussion';
  $reply_node->language = LANGUAGE_NONE;
  $reply_node->title = 'Reply to ' . $node->title;
  $reply_node->field_reply_to[LANGUAGE_NONE][0]['target_id'] = $node->nid;

  $reply_form = drupal_get_form('discussion_node_form', $reply_node);
  $reply_form['title']['#access'] = FALSE;
  $reply_form['field_reply_to']['#access'] = FALSE;
  $reply_form['menu']['#access'] = FALSE;
  $reply_form['path']['#access'] = FALSE;
  $reply_form['additional_settings']['#access'] = FALSE;
  $reply_form['revision_information']['#access'] = FALSE;

  $reply_form['group_assignment']['#access'] = FALSE;
  $reply_form['group_assignment']['groups']['#access'] = FALSE;


  $build['reply'] = $reply_form;
dpm($reply_form);
  return $build;
}

function _pull_latest_content($group = NULL, $offset = 0, $limit = 10) {
  $items = array();
  $groups = array();

  if ($group == NULL) {
    $groups = Group::getCurrentUserGroups();
  }
  elseif (is_a($group, 'Group')) {
    $groups = array($group->gid => $group);
  }

  if (!empty($groups)) {

    $query = "(
    SELECT 'node' AS nc, n.nid AS id, n.created
    FROM {discussion_group_content} dgc
    JOIN {node} n ON dgc.eid = n.nid
    WHERE dgc.entity_type = 'node'
    AND dgc.gid IN (" . implode(', ', array_keys($groups)) . ")
    )
    UNION
    (
    SELECT 'comment' AS nc, c.cid AS id, c.created
    FROM {comment} c
    JOIN {discussion_group_content} dgc ON dgc.eid = `nid`
    WHERE dgc.entity_type = 'node'
    AND dgc.gid IN (" . implode(', ', array_keys($groups)) . ")
    )
    ORDER BY created DESC ";

    if ($offset == NULL && $limit == NULL) {
      $result = db_query($query);
      $results = $result->fetchAll();

      return count($results);
    }
    else {
      $query .= " LIMIT " . $offset . ", " . $limit;

      $result = db_query($query);
      $results = $result->fetchAll();

      foreach ($results as $r) {
        $func = $r->nc . '_load';
        $i = $func($r->id);
        $i->__nc = $r->nc;

        $items[] = $i;
      }
    }


  }

  return $items;
}

/**
 * Implements hook_theme().
 */
function discussion_theme($existing, $type, $theme, $path) {
  return array(
    'user_info' => array(
      'template' => 'templates/user-info',
      'render element' => 'element',
    ),
    'discussion_page_wrapper' => array(
      'template' => 'templates/discussion-page-wrapper',
      'render element' => 'element',
    ),
    'dashboard_content' => array(
      'template' => 'templates/dashboard-content',
      'render element' => 'element',
    ),
    'group_content' => array(
      'template' => 'templates/group-content',
      'render element' => 'element',
    ),
    'mini_calendar' => array(
      'template' => 'templates/mini-calendar',
      'render element' => 'element',
    ),
    'latest_feed_pager' => array(
      'template' => 'templates/latest-feed-pager',
      'variables' => array(
        'page' => 0,
        'max' => 1,
      ),
    ),
  );
}

function template_preprocess_mini_calendar() {
  drupal_add_js(drupal_get_path('module', 'discussion') . '/js/mini-calendar.js');
}

function current_events_callback() {
  global $user;

  $query_args = drupal_get_query_parameters();

  $date = isset($_GET['date'])? strtotime($_GET['date']) : mktime(0, 0, 0, date('m'), date('d'), date('Y'));

  $start = date('Y-m-', $date) . '01';
  $end = date('Y-m-', $date) . date('t', $date);

  // Initialize return output array
  $output = array();

  // Get groups of the currently logged in user
  $groups = Group::getCurrentUserGroups();

  // Query Events within the group and within the time frame.
  $q = db_select('node', 'n');
  $q->fields('n', array('nid'));
  $q->join('discussion_group_content', 'dgc', 'n.nid = dgc.eid');
  $q->join('field_data_field_dates', 'f', 'n.nid = f.entity_id');
  $q->condition('f.entity_type', 'node');
  $q->condition('n.type', 'event');

  // create an OR
  $o1 = db_or();
  // start date is within the month
  $o1->condition('f.field_dates_value', array($start, $end), 'BETWEEN');
  // end date is within the month
  $o1->condition('f.field_dates_value2', array($start, $end), 'BETWEEN');

  // Create a new AND
  $span = db_and();
  // Start date is before the month and end date is after the end of the month
  $span->condition('f.field_dates_value', $start, '<');
  $span->condition('f.field_dates_value2', $end, '>');

  // add and to or
  $o1->condition($span);

  // add or to full query
  $q->condition($o1);

  // We want distinct nodes
  $q->distinct();

  $result = $q->execute();

  while($record = $result->fetchAssoc()) {
    $node = node_load($record['nid']);

    $output[] = array(
      'start' => $node->field_dates[LANGUAGE_NONE][0]['value'],
      'end' => $node->field_dates[LANGUAGE_NONE][0]['value2'],
      'title' => $node->title,
      'location' => isset($node->field_event_location[LANGUAGE_NONE][0]['value'])? $node->field_event_location[LANGUAGE_NONE][0]['value'] : '',
      'url' => '',
    );
  }

  return $output;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * TODO: should this be moved to the theme?
 */
function discussion_preprocess_page(&$variables) {
  global $user;

  $sidebar = NULL;

  // add user block, always
  $sidebar['user'] = array(
    '#theme' => 'user_info',
    '#account' => $user,
  );

  $dashboard = ($_GET['q'] == 'dashboard')? TRUE : FALSE;
  $q = $_GET['q'];
  $q = explode('/', $q);

  // Add groups block
  $groups = Group::getCurrentUserGroups();
  // Set up groups block.
  $sidebar['groups'] = array(
    '#theme' => 'item_list',
    '#items' => array(),
    '#title' => t('Groups'),
  );

  $groups = Group::getCurrentUserGroups();
  foreach ($groups as $gid => $group) {
    $str = $group->label();

    if ($group->isOwner($user)) {
      $str .= ' (Owner)';
    }

    $sidebar['groups']['#items'][] = array(
      'data' => l($str, 'group/' . $group->gid),
    );
  }

  // Setup add content block.
  $sidebar['content'] = array(
    '#theme' => 'item_list',
    '#items' => array(
      'discussion' => array(
        'data' => l('Start New Discussion', 'node/add/discussion'),
      ),
      'event' => array(
        'data' => l('Create New Event', 'node/add/event'),
      ),
      'image' => array(
        'data' => l('Upload New Image', 'node/add/image'),
      ),
      'gallery' => array(
        'data' => l('Start New Gallery', 'node/add/gallery'),
      ),
    ),
    '#title' => t('Add content'),
  );

  if ($dashboard) {

    // Setup mini calendar
    $sidebar['mini_calendar'] = array(
      '#theme' => 'mini_calendar',
      '#attributes' => array(
        'data-href' => '/api/current-events',
      ),
    );

  }
  elseif($q[0] == 'group') {
    $group = discussions_get_current_group();

    if (!empty($group)) {
      $sidebar['group_content'] = array(
        '#theme' => 'item_list',
        '#items' => array(
          'discussions' => l('Discussions', 'group/' . $group->gid . '/discussions'),
          'events' => l('Events', 'group/' . $group->gid . '/events'),
          'galleries' => l('Galleries', 'group/' . $group->gid . '/galleries'),
          'images' => l('Images', 'group/' . $group->gid . '/images'),
        ),
        '#title' => t('Content'),
      );

      if ($group->isOwner($user)) {
        $sidebar['group_manage'] = array(
          '#theme' => 'item_list',
          '#items' => array(
            'discussions' => l('Membership', 'group/' . $group->gid . '/memberships'),
          ),
          '#title' => t('Group Administration'),
        );
      }

      // Setup mini calendar
      $sidebar['mini_calendar'] = array(
        '#theme' => 'mini_calendar',
        '#attributes' => array(
          'data-href' => '/api/group-events/' . $group->gid,
        ),
      );
    }
  }

  if (!is_null($sidebar) && !(isset($q[2]) && $q[2] == 'memberships')) {
    $variables['page']['sidebar'] = $sidebar;
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function discussion_preprocess_node(&$variables) {
  if ($variables['elements']['#view_mode'] == 'latest_feed') {
    $variables['theme_hook_suggestions'][] = 'node__latest_feed';
    $account = user_load($variables['uid']);
    $variables['user_picture'] = theme('user_picture', array('account' => $account, 'style_name' => 'user_img_normal'));
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function discussion_preprocess_comment(&$variables) {
  if ($variables['elements']['#view_mode'] == 'latest_feed') {
    $variables['theme_hook_suggestions'][] = 'comment__latest_feed';
    $variables['created'] = strtotime($variables['created']);
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function discussion_theme_registry_alter(&$theme_registry) {

  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'discussion', DISCUSSION_PATH);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  // A list of templates the module will provide templates for
  $hooks = array('node__latest_feed', 'comment__latest_feed');
  foreach ($hooks as $h) {
    // Add the key 'theme paths' if it doesn't exist in this theme's registry
    if (!isset($theme_registry[$h]['theme paths'])) {
      $theme_registry[$h]['theme paths'] = array();
    }
    //Shift this module's directory to the top of the theme path list
    if(is_array($theme_registry[$h]['theme paths'])) {
      $first_element = array_shift($theme_registry[$h]['theme paths']);
      if ($first_element) {
        array_unshift($theme_registry[$h]['theme paths'], $first_element, DISCUSSION_PATH);
      } else {
        array_unshift($theme_registry[$h]['theme paths'], DISCUSSION_PATH);
      }
    }
  }

}

function discussions_get_current_group() {
  if ($group = menu_get_object('group', 1)) {
    return $group;
  }
  return NULL;
}
