<?php
/**
 * @file
 * discussion_group.module
 */

/**
 * Implements hook_menu().
 */
function discussion_group_menu() {
  $items['admin/group/%'] = array(
    'title' => 'Group',
    'page callback' => 'group_admin_page',
    'access callback' => 'group_entity_access',
    'access arguments' => array(2, 'admin'),
    'file' => 'includes/group.inc',
    'type' => MENU_SUGGESTED_ITEM,
  );



  $items['group/%group/memberships/%user/remove'] = array(
    'title' => 'Group',
    'page callback' => 'group_membership_remove_user',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,
    'access arguments' => array(2, 'admin'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['group/%group/memberships/%user/change-role/%'] = array(
    'title' => 'Group',
    'page callback' => 'group_membership_change_role',
    'page arguments' => array(1, 3, 5),
    'access callback' => TRUE,
    'access arguments' => array(2, 'admin'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $items;
}

function group_membership_remove_user($group, $user) {
  // Check to see if the user is an owner.
  // Can't remove owner

  if ($group->isOwner($user)) {
    drupal_set_message(t('Cannot remove a group owner'), 'warning');
  }
  else {
    $membership = $group->getGroupMemebrship($user);
    $membership->delete();
    drupal_set_message(t('User removed from group'), 'status');
  }

  drupal_goto();
}

function group_membership_change_role($group, $user, $rid) {

  if ($group->isOwner($user)) {
    drupal_set_message(t('Cannot change a group owner'), 'warning');
  }
  else {
    $membership = $group->getGroupMemebrship($user);
    $membership->grid = $rid;
    $membership->save();
    drupal_set_message(t('User\'s role has been changed'), 'status');
  }

  drupal_goto();
}

/**
 * Implements hook_entity_info().
 */
function discussion_group_entity_info() {
  $items = array();

  $items['group'] = array(
    'label' => t('Group'),
    'controller class' => 'GroupController',
    'entity class' => 'Group',
    'load hook' => 'group_load',
    'uri callback' => 'group_uri',
    //'label callback' => 'group_label',
    'fieldable' => TRUE,
    'revisionable' => TRUE,
    'access callback' => 'group_entity_access',
    'entity keys' => array(
      'id' => 'gid',
      'revision' => 'vgid',
      'label' => 'group_name',
      'bundle' => 'type',
    ),
    'bundles' => array(
      'group' => array(
        'label' => t('Group'),
        'admin' => array(
          'path' => 'admin/groups/group/group/manage',
          'access arguments' => array('administer groups'),
        ),
      ),
      'free_group' => array(
        'label' => t('Free Group'),
        'admin' => array(
          'path' => 'admin/groups/group/free-group/manage',
          'access arguments' => array('administer groups'),
        ),
      ),
    ),
    'view modes' => array(

    ),
    'admin ui' => array(
      'controller class' => 'GroupUIController',
      'path' => 'admin/groups/group',
      'file' => 'includes/group.inc',
    ),
    'module' => 'discussion_group',
    'base table' => 'discussion_group',
    'revision table' => 'discussion_group_revision',
  );

  $items['group_membership'] = array(
    'label' => t('Group Membership'),
    'controller class' => 'GroupMembershipController',
    'entity class' => 'GroupMembership',
    'load hook' => 'discussion_group_membership_load',
    'uri callback' => 'discussion_group_membership_uri',
    'label callback' => 'discussion_group_membership_label',
    'fieldable' => TRUE,
    'access callback' => 'group_membership_entity_access',
    'entity keys' => array(
      'id' => 'gmid',
      'bundle' => 'type',
    ),
    'bundles' => array(
      'membership' => array(
        'label' => t('Membership'),
        'admin' => array(
          'path' => 'admin/groups/group-membership/manage/%group_membership_bundle',
          'real path' => 'admin/groups/group-membership/manage/membership',
          'bundle argument' => 3,
          'access arguments' => array('administer groups'),
        ),
      ),
    ),
    'view modes' => array(

    ),
    'module' => 'discussion_group',
    'base table' => 'discussion_group_membership',
  );

  $items['group_content'] = array(
    'label' => t('Group Content'),
    'controller class' => 'GroupContentController',
    'entity class' => 'Groupcontent',
    'load hook' => 'discussion_group_content_load',
    'uri callback' => 'discussion_group_content_uri',
    'label callback' => 'discussion_group_content_label',
    'fieldable' => TRUE,
    'access callback' => 'group_content_entity_access',
    'entity keys' => array(
      'id' => 'gcid',
      'bundle' => 'type',
    ),
    'bundles' => array(
      'content' => array(
        'label' => t('Content'),
        'admin' => array(
          'path' => 'admin/groups/group-content/manage/%group_content_bundle',
          'real path' => 'admin/groups/group-content/manage/content',
          'bundle argument' => 3,
          'access arguments' => array('administer groups'),
        ),
      ),
    ),
    'view modes' => array(

    ),
    'module' => 'discussion_group',
    'base table' => 'discussion_group_content',
  );

  return $items;
}

function group_membership_bundle_load($name) {
  return $name;
}

function group_content_bundle_load($name) {
  return $name;
}

/**
 * Implements hook_entity_property_info().
 */
function discussion_group_entity_property_info() {
  $date_properties = array(
    'created' => array(
      'label' => 'Created',
      'type' => 'date',
    ),
    'updated' => array(
      'label' => 'Updated',
      'type' => 'date',
    ),
  );

  $info = array();

  $info['group']['properties'] = array(
    'group_name' => array(
      'label' => t("Group Name"),
      'type' => 'text',
      'description' => t("The group name."),
    ),
  );
  $info['group']['properties'] += $date_properties;

  $info['group_membership']['properties'] = array(
    'gid' => array(
      'label' => t("Group ID"),
      'type' => 'integer',
      'description' => t("The unique group ID."),
    ),
    'uid' => array(
      'label' => t("User ID"),
      'type' => 'integer',
      'description' => t("The unique user ID."),
    ),
    'grid' => array(
      'label' => t("Group role ID"),
      'type' => 'integer',
      'description' => t("The unique group role ID."),
    ),
  );
  $info['group_membership']['properties'] += $date_properties;

  $info['group_content']['properties'] = array(
    'gid' => array(
      'label' => t("Group ID"),
      'type' => 'integer',
      'description' => t("The unique group role ID."),
    ),
    'eid' => array(
      'label' => t("Entity ID"),
      'type' => 'integer',
      'description' => t("The unique ID."),
    ),
    'entity_type' => array(
      'label' => t("Entity Type"),
      'type' => 'text',
      'description' => t("The entity_type of the entity that is part of the group."),
    ),
    'entity_bundle' => array(
      'label' => t("Entity Bundle"),
      'type' => 'text',
      'description' => t("The entity_bundle of the entity that is part of the group."),
    ),
  );
  $info['group_content']['properties'] += $date_properties;

  return $info;
}

/**
 * Implements hook_entity_info_alter().
 */
function discussion_group_entity_info_alter(&$entity_info) {

  $entity_info['node']['view modes']['latest_feed'] = array(
    'label' => 'Latest Feed',
    'custom settings' => FALSE,
  );
  $entity_info['node']['view modes']['discussion_replies'] = array(
    'label' => 'Discussion Replies',
    'custom settings' => FALSE,
  );
/*
  $entity_info['comment']['view modes']['latest_feed'] = array(
    'label' => 'Latest Feed',
    'custom settings' => FALSE,
  );
*/
}

/**
 * Implements hook_entity_presave().
 */
function discussion_group_entity_presave($entity, $type) {
  $entity_info = entity_get_info($type);
  $info = entity_get_property_info($type);

  if (isset($entity_info['module']) && $entity_info['module'] == 'discussion_group') {
    if (isset($info['properties']['created']) && isset($entity->is_new) && $entity->is_new && !isset($entity->created)) {
      $entity->created = time();
    }

    if (isset($info['properties']['updated'])) {
      $entity->updated = time();
    }
  }

}

/**
 * Implements hook_permission().
 */
function discussion_group_permission() {
  return array(
    'administer groups' => array(
      'title' => t('Administer Groups'),
      'description' => t('Perform administration tasks for groups.'),
    ),
  );
}

function group_load($gid) {
  return entity_load_single('group', $gid);
}

function group_uri($group) {
  //return array('path' => 'admin/group/' . $group->gid);
  return array('path' => 'group/' . $group->gid);
}

function group_entity_access($group_id) {
  global $user;

  return TRUE;
}

function group_membership_load() {

}

function discussion_group_membership_uri() {

}

function discussion_group_membership_label() {

}

function group_membership_entity_access() {
  return TRUE;
}



/**
 * Implements hook_form_alter().
 */
function discussion_group_form_alter(&$form, &$form_state, $form_id) {

  if (strpos($form_id, '_node_form') !== FALSE && in_array($form['#bundle'], array('gallery', 'event', 'discussion'))) {

    if ($form['#bundle'] == 'discussion' && isset($form['#node']->nid) && empty($form['#node']->field_reply_to[LANGUAGE_NONE][0]['target_id'])) {
      form_load_include($form_state, 'inc', 'node', 'node.pages');

      $groups = Group::getCurrentUserGroups();
      $required = TRUE;

      $group_options = array();
      foreach ($groups as $group_id => $group) {
        $group_options[$group_id] = $group->label();
      }

      // Check for existing groups.
      $group_options_default = array();
      $group_options_value = array();
      if (isset($form['#node']->nid)) {
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'group_content');
        $query->propertyCondition('entity_type', 'node');
        $query->propertyCondition('eid', $form['#node']->nid);

        $results = $query->execute();

        if (isset($results['group_content'])) {
          $group_contents = entity_load('group_content', array_keys($results['group_content']));

          foreach ($group_contents as $group) {
            $group_options_default[] = $group->gid;
          }
        }
      }
      elseif (isset($form['#node']->field_reply_to[LANGUAGE_NONE][0]['target_id'])) {
        $parent = node_load($form['#node']->field_reply_to[LANGUAGE_NONE][0]['target_id']);
        $groups = GroupContent::getNodeGroupOwners($parent);
        $group_options_value = $group_options_default = array_keys($groups);

        $required = FALSE;
      }

      if ($current_group = discussion_get_current_group()) {
        $group_options_default[] = $current_group->gid;
      }

      $form['group_assignment'] = array(
        '#type' => 'fieldset',
        '#title' => t('Group Assignment'),
        '#weight' => -20,
        '#tree' => TRUE,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );

      $form['group_assignment']['groups'] = array(
        '#type' => 'select',
        '#title' => t('Publish to'),
        '#options' => $group_options,
        '#multiple' => TRUE,
        '#required' => $required,
        '#default_value' => $group_options_default,
        //'#value' => $group_options_value,
      );

      if (!empty($group_options_value)) {
        $form['group_assignment']['groups']['#value'] = $group_options_value;
      }

      $form['actions']['submit']['#submit'][] = 'discussion_group_node_form_submit';
    }

  }
}

function discussion_group_node_form_submit(&$form, &$form_state) {
  $group_ids = $form_state['values']['group_assignment']['groups'];

  // Check for existing, update or add new.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'group_content');
  $query->propertyCondition('entity_type', 'node');
  $query->propertyCondition('eid', $form_state['values']['nid']);

  $results = $query->execute();

  if (isset($results['group_content'])) {
    $group_contents = entity_load('group_content', array_keys($results['group_content']));

    foreach ($group_contents as $group) {
      if (in_array($group->gid, $group_ids)) {
        // remove so we don't add later.
        unset($group_ids[array_search($group->gid, $group_ids)]);

        // update only with node type and save
        $group->entity_bundle = $form_state['complete form']['#node']->type;
        $group->save();
      }
      else {
        // If it is not in the array we need to delete it.
        $group->delete();
      }
    }
  }

  foreach ($group_ids as $group_id) {
    $gc = entity_create('group_content', array());

    $gc->eid = $form_state['values']['nid'];
    $gc->gid = $group_id;
    $gc->entity_type = 'node';
    $gc->entity_bundle = $form_state['complete form']['#node']->type;

    $gc->save();
  }

  // If this is a discussion we need to update all nodes in thread.
  if ($form_state['complete form']['#node']->type == 'discussion') {
    _update_children_discussion_nodes($form_state['values']['nid'], $form_state['values']['group_assignment']['groups']);
  }


  // Redirect
  //$current_group = discussion_get_current_group();
  //$form_state['redirect'] = 'group/' . $current_group->gid . '/' . $form_state['complete form']['#node']->type . 's';
}

function _update_children_discussion_nodes($nid, $group_ids) {
  $nodes = array();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'discussion');
  $query->fieldCondition('field_reply_to', 'target_id', $nid);

  $result = $query->execute();

  if (isset($result['node'])) {
    $nodes = entity_load('node', array_keys($result['node']));
  }

  foreach ($nodes as $node) {
    $modified_group_ids = $group_ids;

    // Check for existing, update or add new.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'group_content');
    $query->propertyCondition('entity_type', 'node');
    $query->propertyCondition('eid', $node->nid);

    $results = $query->execute();

    if (isset($results['group_content'])) {
      $group_contents = entity_load('group_content', array_keys($results['group_content']));

      foreach ($group_contents as $group) {
        if (in_array($group->gid, $modified_group_ids)) {
          // remove so we don't add later.
          unset($modified_group_ids[array_search($group->gid, $modified_group_ids)]);

          // update only with node type and save
          $group->entity_bundle = $node->type;
          $group->save();
        }
        else {
          // If it is not in the array we need to delete it.
          $group->delete();
        }
      }
    }

    foreach ($modified_group_ids as $group_id) {
      $gc = entity_create('group_content', array());

      $gc->eid = $node->nid;
      $gc->gid = $group_id;
      $gc->entity_type = 'node';
      $gc->entity_bundle = $node->type;

      $gc->save();
    }

    _update_children_discussion_nodes($node->nid, $group_ids);
  }

}

/**
 * Implements hook_node_access().
 */
function discussion_group_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  if (!is_string($node)) {

    $groups = Group::getCurrentUserGroups();
    // Default to not allow.
    $allow = FALSE;
    foreach ($groups as $group) {
      if ($group->isNodeInGroup($node)) {
        $allow = TRUE;
      }
    }

    // Returning nothing from this function would have the same effect.
    return ($allow)? NODE_ACCESS_IGNORE : NODE_ACCESS_DENY;
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_file_entity_access().
 */
function discussion_group_file_entity_access($op, $file, $account) {
  // Deny all direct access to files.

  // Returning nothing from this function would have the same effect.
  return FILE_ENTITY_ACCESS_DENY;
}
