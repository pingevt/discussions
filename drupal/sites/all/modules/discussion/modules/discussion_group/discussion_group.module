<?php

/**
 * Implements hook_entity_info().
 */
function discussion_group_entity_info() {
  $items = array();

  $items['group'] = array(
    'label' => t('Group'),
    'controller class' => 'GroupController',
    'entity class' => 'Group',
    'load hook' => 'luw_group_load',
    'uri callback' => 'luw_group_uri',
    //'label callback' => 'luw_group_label',
    'fieldable' => TRUE,
    'revisionable' => TRUE,
    'access callback' => 'group_entity_access',
    'entity keys' => array(
      'id' => '_id',
      'revision' => '_revision_id',
      'label' => 'group_name',
      'bundle' => '_bundle',
    ),
    'bundles' => array(
      'group' => array(
        'label' => t('Group'),
        'admin' => array(
          'path' => 'admin/structure/group/manage',
          'access arguments' => array('administer groups'),
        ),
      ),
    ),
    'view modes' => array(

    ),
    'admin ui' => array(
      'controller class' => 'GroupUIController',
      'path' => 'admin/group',
      'file' => 'includes/group.inc',
    ),
    'module' => 'discussion_group',
  );

  $items['group_membership'] = array(
    'label' => t('Group Membership'),
    'controller class' => 'GroupMembershipController',
    'entity class' => 'GroupMembership',
    'load hook' => 'luw_group_membership_load',
    'uri callback' => 'luw_group_membership_uri',
    'label callback' => 'luw_group_membership_label',
    'fieldable' => TRUE,
    'access callback' => 'group_membership_entity_access',
    'entity keys' => array(
      'id' => '_id',
      'revision' => '_revision_id',
      'bundle' => '_bundle',
    ),
    'bundles' => array(
      'membership' => array(
        'label' => t('Membership'),
        'admin' => array(
          'path' => 'admin/group-membership/membership/manage',
          'access arguments' => array('administer groups'),
        ),
      ),
    ),
    'view modes' => array(

    ),
    'module' => 'discussion_group',
  );

  $items['group_content'] = array(
    'label' => t('Group Content'),
    'controller class' => 'GroupContentController',
    'entity class' => 'Groupcontent',
    'load hook' => 'luw_group_content_load',
    'uri callback' => 'luw_group_content_uri',
    'label callback' => 'luw_group_content_label',
    'fieldable' => TRUE,
    'access callback' => 'group_content_entity_access',
    'entity keys' => array(
      'id' => '_id',
      'revision' => '_revision_id',
      'bundle' => '_bundle',
    ),
    'bundles' => array(
      'content' => array(
        'label' => t('Content'),
        'admin' => array(
          'path' => 'admin/group-content/content/manage',
          'access arguments' => array('administer groups'),
        ),
      ),
    ),
    'view modes' => array(

    ),
    'module' => 'discussion_group',
  );

  return $items;
}

/**
 * Implements hook_entity_property_info().
 */
function discussion_group_entity_property_info() {
  $date_properties = array(
    'created' => array(
      'label' => 'Created',
      'type' => 'date',
    ),
    'updated' => array(
      'label' => 'Updated',
      'type' => 'date',
    ),
  );

  $info = array();

  $info['group']['properties'] = array(
    'group_name' => array(
      'label' => t("Group Name"),
      'type' => 'text',
      'description' => t("The group name."),
    ),
  );
  $info['group']['properties'] += $date_properties;

  $info['group_membership']['properties'] = array(
    'gid' => array(
      'label' => t("Group ID"),
      'type' => 'integer',
      'description' => t("The unique group ID."),
    ),
    'uid' => array(
      'label' => t("User ID"),
      'type' => 'integer',
      'description' => t("The unique user ID."),
    ),
    'grid' => array(
      'label' => t("Group role ID"),
      'type' => 'integer',
      'description' => t("The unique group role ID."),
    ),
  );
  $info['group_membership']['properties'] += $date_properties;

  $info['group_content']['properties'] = array(
    'gid' => array(
      'label' => t("Group ID"),
      'type' => 'integer',
      'description' => t("The unique group role ID."),
    ),
    'eid' => array(
      'label' => t("Entity ID"),
      'type' => 'integer',
      'description' => t("The unique ID."),
    ),
    'entity_type' => array(
      'label' => t("Entity Type"),
      'type' => 'text',
      'description' => t("The entity_type of the entity that is part of the group."),
    ),
  );
  $info['group_content']['properties'] += $date_properties;

  return $info;
}

/**
 * Implements hook_entity_info_alter().
 */
function discussion_group_entity_info_alter(&$entity_info) {

  $entity_info['node']['view modes']['latest_feed'] = array(
    'label' => 'Latest Feed',
    'custom settings' => FALSE,
  );

  $entity_info['comment']['view modes']['latest_feed'] = array(
    'label' => 'Latest Feed',
    'custom settings' => FALSE,
  );

}

/**
 * Implements hook_entity_presave().
 */
function discussion_group_entity_presave($entity, $type) {
  $entity_info = entity_get_info($type);
  $info = entity_get_property_info($type);

  if (isset($entity_info['module']) && $entity_info['module'] == 'discussion_group') {
    if (isset($info['properties']['created']) && isset($entity->is_new) && $entity->is_new && !isset($entity->created)) {
      $entity->created = time();
    }

    if (isset($info['properties']['updated'])) {
      $entity->updated = time();
    }
  }
}

/**
 * Implements hook_permission().
 */
function discussion_group_permission() {
  return array(
    'administer groups' => array(
      'title' => t('Administer Groups'),
      'description' => t('Perform administration tasks for groups.'),
    ),
  );
}

function luw_group_load($gid) {
  return entity_load_single('group', $gid);
}

function luw_group_uri() {

}

function luw_group_label() {

}

function group_entity_access($group_id) {
  global $user;

  return TRUE;
}

function luw_group_membership_load() {

}

function luw_group_membership_uri() {

}

function luw_group_membership_label() {

}

function group_membership_entity_access() {
  return TRUE;
}



/**
 * Implements hook_form_alter().
 */
function discussion_group_form_alter(&$form, &$form_state, $form_id) {

  if (strpos($form_id, '_node_form') !== FALSE && in_array($form['#bundle'], array('gallery', 'image', 'event', 'discussion') )) {
    $groups = Group::getCurrentUserGroups();

    $group_options = array();
    foreach ($groups as $group_id => $group) {
      $group_options[$group_id] = $group->label();
    }

    // Check for existing groups.
    $group_options_default = array();
    if (isset($form['#node']->nid)) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'group_content');
      $query->propertyCondition('entity_type', 'node');
      $query->propertyCondition('eid', $form['#node']->nid);

      $results = $query->execute();

      if (isset($results['group_content'])) {
        $group_contents = entity_load('group_content', array_keys($results['group_content']));

        foreach ($group_contents as $group) {
          $group_options_default[] = $group->gid;
        }
      }
    }

    $form['group_assignment'] = array(
      '#type' => 'fieldset',
      '#title' => t('Group Assignment'),
      '#weight' => -20,
      '#tree' => TRUE,
    );

    $form['group_assignment']['groups'] = array(
      '#type' => 'select',
      '#title' => t('Publish to'),
      '#options' => $group_options,
      '#multiple' => TRUE,
      '#required' => TRUE,
      '#default_value' => $group_options_default,
    );

    $form['actions']['submit']['#submit'][] = 'luw_node_form_submit';

  }
}

function luw_node_form_submit(&$form, &$form_state) {

  $group_ids = $form_state['values']['group_assignment']['groups'];

  // Check for existing, update or add new.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'group_content');
  $query->propertyCondition('entity_type', 'node');
  $query->propertyCondition('eid', $form_state['values']['nid']);

  $results = $query->execute();
  if (isset($results['group_content'])) {
    $group_contents = entity_load('group_content', array_keys($results['group_content']));

    foreach ($group_contents as $group) {
      if (in_array($group->gid, $group_ids)) {
        unset($group_ids[array_search($group->gid, $group_ids)]);
      }
      else {
        $group->delete();
      }
    }
  }

  foreach ($group_ids as $group_id) {
    $gc = entity_create('group_content', array());

    $gc->eid = $form_state['values']['nid'];
    $gc->gid = $group_id;
    $gc->entity_type = 'node';

    $gc->save();
  }
}
